[1mdiff --git a/cogs/rpg.py b/cogs/rpg.py[m
[1mindex f5e898f..25e19f4 100644[m
[1m--- a/cogs/rpg.py[m
[1m+++ b/cogs/rpg.py[m
[36m@@ -2,8 +2,9 @@[m [mimport discord[m
 import re[m
 import dice[m
 import asyncio[m
[31m-from discord.ext import commands[m
[32m+[m[32mfrom discord.ext import commands, tasks[m
 import sys[m
[32m+[m[32mfrom datetime import datetime[m
 [m
 sys.path.append("..")[m
 from dbinit import lt_db[m
[36m@@ -33,24 +34,24 @@[m [mclass rpg(commands.Cog):[m
         Comments may be added to a dice output by appending the command with #, followed by the content of the comment you wish to be shown.[m
         """[m
         if ctx.invoked_subcommand is None:[m
[31m-            [m
[31m-            if input.find('!') != -1:[m
[32m+[m
[32m+[m[32m            if input.find("!") != -1:[m
                 Guild = ctx.message.guild.id[m
                 ID = ctx.message.author.id[m
[31m-                [m
[32m+[m
                 try:[m
[31m-                    input, sep, extra = re.split(r'([+|-])',input, maxsplit=1)[m
[31m-                    label=input.replace('!','',1)[m
[31m-                    input = self.lt_db.dice_get(ID, Guild, input.replace('!',''))[m
[32m+[m[32m                    input, sep, extra = re.split(r"([+|-])", input, maxsplit=1)[m
[32m+[m[32m                    label = input.replace("!", "", 1)[m
[32m+[m[32m                    input = self.lt_db.dice_get(ID, Guild, input.replace("!", ""))[m
                     inputDice = input[m
                     input = input + sep + str(extra)[m
[31m-                    commentText= f'Rolling {label} : {inputDice} + {str(extra)}'    [m
[32m+[m[32m                    commentText = f"Rolling {label} : {inputDice} + {str(extra)}"[m
 [m
                 except:[m
[31m-                    label = input.replace('!','',1)[m
[31m-                    input = self.lt_db.dice_get(ID, Guild, input.replace('!',''))[m
[31m-                    commentText= f'Rolling {label} : {input}'    [m
[31m-                   [m
[32m+[m[32m                    label = input.replace("!", "", 1)[m
[32m+[m[32m                    input = self.lt_db.dice_get(ID, Guild, input.replace("!", ""))[m
[32m+[m[32m                    commentText = f"Rolling {label} : {input}"[m
[32m+[m
             try:[m
                 isPlus = input.find("+")[m
                 isMinus = input.find("-")[m
[36m@@ -67,7 +68,7 @@[m [mclass rpg(commands.Cog):[m
 [m
                     if diceNum == "":[m
                         diceNum = "1"[m
[31m-                    [m
[32m+[m
                     outList = dice.roll(input)[m
                     for i in outList:[m
                         Total += i[m
[36m@@ -173,7 +174,9 @@[m [mclass rpg(commands.Cog):[m
         Guild = ctx.message.guild.id[m
         User = ctx.message.author.id[m
         self.lt_db.dice_add(User, Guild, Alias, Value)[m
[31m-        await ctx.send(f"{ctx.message.author.display_name} has added the variable {Alias} with the dice expression of {Value}.")[m
[32m+[m[32m        await ctx.send([m
[32m+[m[32m            f"{ctx.message.author.display_name} has added the variable {Alias} with the dice expression of {Value}."[m
[32m+[m[32m        )[m
 [m
     @d.command(pass_context=True)[m
     async def delete(self, ctx, Alias):[m
[36m@@ -239,14 +242,13 @@[m [mclass rpg(commands.Cog):[m
         Syntax:[m
         .init add [name] [dice][m
         """[m
[31m-        [m
[32m+[m
         Category, Guild, ID = self.ctx_info(ctx)[m
         try:[m
             int(dieRoll)[m
             outcome = int(dieRoll)[m
         except:[m
             outcome = await rpg.d(self, ctx, dieRoll)[m
[31m-            [m
         try:[m
             ID = ctx.message.mentions[0].id[m
         except:[m
[36m@@ -271,7 +273,7 @@[m [mclass rpg(commands.Cog):[m
                 self.lt_db.turn_next(Guild, Category)[m
             await ctx.send(f"{name} has been removed from the initiative count.")[m
             await self.init(ctx)[m
[31m-[m
[32m+[m[41m            [m
     @init.command()[m
     async def end(self, ctx):[m
         """[m
[36m@@ -281,6 +283,7 @@[m [mclass rpg(commands.Cog):[m
         check = self.lt_db.owner_check(Guild, Category, ID)[m
         if check == True:[m
             self.lt_db.init_clear(Guild, Category)[m
[32m+[m[32m            self.lt_db.reminder_remove(Guild, Category)[m
             await ctx.send([m
                 "Combat has ended, and the initiative table has been wiped clean!"[m
             )[m
[36m@@ -330,6 +333,24 @@[m [mclass rpg(commands.Cog):[m
             await ctx.send("I don't think it's your turn yet!")[m
         await self.show(ctx)[m
 [m
[32m+[m[32m    @init.group(case_insensitive=True)[m
[32m+[m[32m    async def reminder(self, ctx):[m
[32m+[m[32m        """[m
[32m+[m[41m        [m
[32m+[m[32m        """[m
[32m+[m[32m        Category, Guild, ID = self.ctx_info(ctx)[m
[32m+[m
[32m+[m[32m    @reminder.command()[m
[32m+[m[32m    async def toggle(self, ctx):[m
[32m+[m[32m        Category, Guild, ID = self.ctx_info(ctx)[m
[32m+[m[32m        output = self.lt_db.reminder_toggle(Guild, Category, ID)[m
[32m+[m[32m        await ctx.send(output)[m
[32m+[m
[32m+[m[32m    @reminder.command()[m
[32m+[m[32m    async def timer(self, ctx, Time):[m
[32m+[m[32m        Category, Guild, ID = self.ctx_info(ctx)[m
[32m+[m
[32m+[m
     @commands.group(case_insensitive=True)[m
     async def dm(self, ctx):[m
         """[m
[36m@@ -450,7 +471,7 @@[m [mclass rpg(commands.Cog):[m
                 await ctx.send(f"{field} has been removed from {Name.title()}!")[m
 [m
     @char.command()[m
[31m-    async def display(self, ctx, *,  Name):[m
[32m+[m[32m    async def display(self, ctx, *, Name):[m
         """[m
         Display information regarding a stored character, including all stored fields.[m
         """[m
[36m@@ -498,7 +519,17 @@[m [mclass rpg(commands.Cog):[m
         """[m
         Sends a link to the Little Thunder Web Editor.[m
         """[m
[31m-        await ctx.send("The LT Web Editor can be found at https://webthunder.herokuapp.com/")[m
[32m+[m[32m        await ctx.send([m
[32m+[m[32m            "The LT Web Editor can be found at https://webthunder.herokuapp.com/"[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m    @tasks.loop(minutes=10.0)[m
[32m+[m[32m    async def reminder(self):[m
[32m+[m[32m        self.lt_db.check_reminders()[m
[32m+[m[32m        now = datetime.now().strftime("%m-%d-%Y-%H-%M")[m
[32m+[m
[32m+[m[32m        reminders = "f"[m
[32m+[m
 [m
 def setup(bot):[m
     bot.add_cog(rpg(bot))[m
[1mdiff --git a/cogs/utility.py b/cogs/utility.py[m
[1mindex 004be50..1804a5e 100644[m
[1m--- a/cogs/utility.py[m
[1m+++ b/cogs/utility.py[m
[36m@@ -6,7 +6,6 @@[m [mclass utility(commands.Cog):[m
     def __init__(self, bot):[m
         self.bot = bot[m
 [m
[31m-    [m
     @commands.command(pass_context=True, no_pm=True, aliases=["clear", "p"])[m
     async def purge(self, ctx, number: int, members="everyone", *, txt=None):[m
         """[m
[36m@@ -21,7 +20,7 @@[m [mclass utility(commands.Cog):[m
     .purge 20 everyone foo - Remove any messages in the last 20 which contain the keyword "foo".[m
         """[m
         await ctx.channel.purge(limit=1)[m
[31m-        if ctx.message.author.permissions_in(ctx.channel).manage_messages: [m
[32m+[m[32m        if ctx.message.author.permissions_in(ctx.channel).manage_messages:[m
             member_object_list = [][m
             if members != "everyone":[m
                 member_list = [x.strip() for x in members.split(" , ")][m
[36m@@ -56,7 +55,7 @@[m [mclass utility(commands.Cog):[m
             else:[m
                 await ctx.send("Too many messages. Enter a number less than 100.")[m
         else:[m
[31m-            [m
[32m+[m
             if number < 100:[m
                 async for message in ctx.message.channel.history(limit=number):[m
                     try:[m
[1mdiff --git a/dbinit.py b/dbinit.py[m
[1mindex 1fef877..4ac25c3 100644[m
[1m--- a/dbinit.py[m
[1m+++ b/dbinit.py[m
[36m@@ -1,5 +1,6 @@[m
 import json[m
 from pymongo import MongoClient, ReturnDocument, ASCENDING[m
[32m+[m[32mimport datetime[m
 import configparser[m
 import os[m
 [m
[36m@@ -42,19 +43,19 @@[m [mclass lt_db(object):[m
 [m
     def dice_add(self, User, Guild, Alias, Value):[m
         self.db.dice[str(Guild)][m
[31m-        updoot = {"$set": {"user":User, "Alias":Alias, "Value":Value}}[m
[31m-        query = {"user":User, "Alias":Alias}[m
[32m+[m[32m        updoot = {"$set": {"user": User, "Alias": Alias, "Value": Value}}[m
[32m+[m[32m        query = {"user": User, "Alias": Alias}[m
         self.db.dice[str(Guild)].update_one(query, updoot, upsert=True)[m
[31m-        [m
[32m+[m
     def dice_get(self, User, Guild, Alias):[m
         self.db.dice[str(Guild)][m
[31m-        query= {"user":User, "Alias":Alias}[m
[32m+[m[32m        query = {"user": User, "Alias": Alias}[m
         dice = self.db.dice[str(Guild)].find_one(query)[m
         return dice["Value"][m
 [m
     def dice_delete(self, User, Guild, Alias):[m
         self.db.dice[str(Guild)][m
[31m-        query= {"user":User, "Alias":Alias}[m
[32m+[m[32m        query = {"user": User, "Alias": Alias}[m
         check = self.db.dice[str(Guild)].find_one_and_delete(query)[m
         if check != None:[m
             return f"{Alias} has been removed!"[m
[36m@@ -77,7 +78,7 @@[m [mclass lt_db(object):[m
 [m
         self.db[str(Guild)][str(Category)].drop()[m
         self.db[str(Guild)].update_one([m
[31m-            {"Category": Category, "Guild":Guild}, {"$unset": {"turn": 1}}[m
[32m+[m[32m            {"Category": Category, "Guild": Guild}, {"$unset": {"turn": 1}}[m
         )[m
 [m
     def init_remove(self, Guild, Category, Name):[m
[36m@@ -280,3 +281,45 @@[m [mclass lt_db(object):[m
         query = {"Category": Category, "name": Name}[m
         inventory = self.db[str(Guild)].find_one(query)["inventory"][m
         return inventory[m
[32m+[m
[32m+[m[32m    def reminder_search(self, Guild, Category):[m
[32m+[m[32m        query= {[m
[32m+[m[32m            "Guild": Guild,[m
[32m+[m[32m            "Category":Category[m
[32m+[m[32m        }[m
[32m+[m[32m        reminder = self.db.reminders.find_one(query)[m
[32m+[m[32m        return reminder[m
[32m+[m
[32m+[m[32m    def reminder_set(self, Guild, Category, ID, Time):[m
[32m+[m[32m        query= {[m
[32m+[m[32m            "Guild": Guild,[m
[32m+[m[32m            "Category":Category[m
[32m+[m[32m            }[m
[32m+[m[32m        updoot = {[m
[32m+[m[32m            "$set":{[m
[32m+[m[32m                "Guild": Guild,[m
[32m+[m[32m                "Category": Category,[m
[32m+[m[32m                "ID" : ID,[m
[32m+[m[32m                "Time": Time,[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        if self.reminder_search(Guild, Category)['Hours'] == None:[m
[32m+[m[32m            updoot['Hours'] = 24[m
[32m+[m[32m        self.db.reminders.update_one(query, updoot, upsert=True)[m
[32m+[m
[32m+[m[32m    def reminder_remove(self, Guild, Category):[m
[32m+[m[32m        query={[m
[32m+[m[32m            "Guild":Guild,[m
[32m+[m[32m            "Category":Category[m
[32m+[m[32m        }[m
[32m+[m[32m        self.db.reminders.update_one(query,{"$unset":{"ID":1}})[m
[32m+[m
[32m+[m[32m    def reminder_toggle(self, Guild, Category, ID):[m
[32m+[m[32m        check = self.reminder_search(Guild, Category)[m
[32m+[m[41m        [m
[32m+[m[32m        if check["Active"] == True:[m
[32m+[m[32m            self.db.reminders.update_one(check, {"$unset":{"Active":1}})[m
[32m+[m[32m            return "Reminders for this category have been turned off."[m
[32m+[m[32m        else:[m
[32m+[m[32m            self.db.reminders.update_one(check, {"$set":{"Active":True}})[m
[32m+[m[32m            return "Reminders for this category have been turned on."[m
\ No newline at end of file[m
